ns$chosen_transform$x.t
ns$chosen_transform$mean
ns$chosen_transform$standardize
ns$chosen_transform$norm_stat
ns$chosen_transform$mean
ns$chosen_transform$eps
ns$chosen_transform$b
ns$chosen_transform$standardize
source("~/NetworkConhect/R/5_global_rmanova.R", echo=TRUE)
ns
source("~/NetworkConhect/R/5_global_rmanova.R", echo=TRUE)
ns$1
ns$'1'
ns$'1'$x.t
source("~/NetworkConhect/R/5_global_rmanova.R", echo=TRUE)
source("~/NetworkConhect/R/5_global_rmanova.R", echo=TRUE)
ns$1
ns$'1'
len(ns$'1')
lenght(ns$'1')
length(ns$'1')
length(ns$'2')
length(ns$'3')
42+33+31
source("~/NetworkConhect/R/5_global_rmanova.R", echo=TRUE)
Gdata
ns$data
source("~/NetworkConhect/R/5_global_rmanova.R", echo=TRUE)
ns$'3'
ns$'2'
ns$'2'
ns$'1'
source("~/NetworkConhect/R/5_global_rmanova.R", echo=TRUE)
source("~/NetworkConhect/R/5_global_rmanova.R", echo=TRUE)
ns
length(ns$data)
source("~/NetworkConhect/R/5_global_rmanova.R", echo=TRUE)
ns
ggplot(ns$'1',aes(x = y))+geom_histogram()
library(ggplot2)
d1 <- data.frame(y = ns$'1')
ggplot(ns$'1',aes(x = y))+geom_histogram()
ggplot(d1,aes(x = y))+geom_histogram()
d1 <- data.frame(y = ns$'2')
ggplot(d1,aes(x = y))+geom_histogram()
class(ns$'1')
source("~/NetworkConhect/R/5_global_rmanova.R", echo=TRUE)
source("~/NetworkConhect/R/5_global_rmanova.R", echo=TRUE)
source("~/NetworkConhect/R/5_global_rmanova.R", echo=TRUE)
ns$v1
ns$v2
ns$v3
c(ns$v1,ns$v2,ns$v3)
source("~/NetworkConhect/R/5_global_rmanova.R", echo=TRUE)
source("~/NetworkConhect/R/5_global_rmanova.R", echo=TRUE)
source("~/NetworkConhect/R/5_global_rmanova.R", echo=TRUE)
source("~/NetworkConhect/R/5_global_rmanova.R", echo=TRUE)
norm_values(ns$v1,ns$v2,ns$v3)
norm_values<- c(ns$v1,ns$v2,ns$v3)
norm_values
datat$norm_val <- norm_values
datat
lmer(norm_val ~ Group + (1|ids),data = datat)
lmerTest::lmer(norm_val ~ Group + (1|ids),data = datat)
fit <- lmerTest::lmer(norm_val ~ Group + (1|ids),data = datat)
summary(fit)
devtools::install()
devtools::document()
devtools::document()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
source("~/NetworkConhect/R/3_compute_metrics.R", echo=TRUE)
source("~/NetworkConhect/R/3_compute_metrics.R", echo=TRUE)
devtools::install()
source("~/NetworkConhect/R/3_compute_metrics.R", echo=TRUE)
devtools::install()
print("erv",9)
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
#' Plot the edges weight distribution for each participant of a group. FA weighted
#'
#'
#' Get fractional anistropy edges weight distribution each participants of a group
#' (V1, V2, V3). Plot it as a ridge plot. Note : You can plot the three ridges side to side
#' by calling this function three times and using gridExtra::grid.arrange.
#'
#' @param dataFA dataframe containing all the FA weighted data
#' @param v_id chr visit id like "V1", "V2"...
#' @examples
#' plot_weight_distribution(data)
#' @export
get_edge_distribution <- function(dataFA,v_id){
idsV1 <- get_subject_ids(dataFA,v_id)
graph_V1 <- lapply( idsV1, FUN =  function(x) makeGraph(dataFA,x,v_id,"FA",0))
edges_V1 <- lapply(graph_V1, FUN = function(x) data.frame(E(x)$weight)[,1])
nb_edges <- lapply(edges_V1, length)
rep_ids <- c()
for(i in 1:length(idsV1)){
rep_idi <- lapply(nb_edges[[i]],FUN = function(x) rep(idsV1[[i]],x))
rep_ids <- c(rep_ids,rep_idi)
}
data_edge_V1 <- data.frame(
sub_ids = factor(unlist(rep_ids)),
edges = unlist(edges_V1)
)
data_edge_V1
}
source("~/NetworkConhect/R/2_graph_construction.R", echo=TRUE)
devtools::install()
library(NetworkConhect)
devtools::document()
devtools::install()
library(NetworkConhect)
library(NetworkConhect)
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
source("~/NetworkConhect/R/2_graph_construction.R", echo=TRUE)
devtools::install()
devtools::install()
devtools::install()
M <- readxl::read_excel("/home/imabrain/Documents/fbc_in_fullWM.xslx")
M <- readxl::read_excel("/home/imabrain/Documents/fbc_in_full_WM.xslx")
M <- readxl::read_excel("/home/imabrain/documents/fbc_in_full_WM.xslx")
M <- readxl::read_excel("/home/imabrain/Documents/fbc_in_full_WM.xlsx")
head(M)
getDataDir("FBC")
source("~/NetworkConhect/R/1_load_data.R", echo=TRUE)
getDataDir("FBC")
head(M)
read_and_normalize_fbc <- function(data_path){
data_full <- read_excel(data_path)
if(WM_metric=='FBC'){
# drois <- separateRois(data_full)
df <- as.data.frame(cbind(drois[,1],drois[,2],drois[,6],drois[,7],drois[,9]))
colnames(df) <- c('subject_id','visit_id','from','to','weight')
df
}else{
df <- as.data.frame(cbind(data_full[,1],data_full[,2],data_full[,12],data_full[,13],data_full[,10]))
colnames(df) <- c('subject_id','visit_id','from','to','weight')
df
}
}
dp<-getDataDir("FBC")
Df <- read_and_normalize_fbc(dp)
read_and_normalize_fbc <- function(data_path){
data_full <- readxl::read_excel(data_path)
if(WM_metric=='FBC'){
# drois <- separateRois(data_full)
df <- as.data.frame(cbind(drois[,1],drois[,2],drois[,6],drois[,7],drois[,9]))
colnames(df) <- c('subject_id','visit_id','from','to','weight')
df
}else{
df <- as.data.frame(cbind(data_full[,1],data_full[,2],data_full[,12],data_full[,13],data_full[,10]))
colnames(df) <- c('subject_id','visit_id','from','to','weight')
df
}
}
Df <- read_and_normalize_fbc(dp)
read_and_normalize_fbc <- function(data_path,WM_metric){
data_full <- readxl::read_excel(data_path)
if(WM_metric=='FBC'){
# drois <- separateRois(data_full)
df <- as.data.frame(cbind(drois[,1],drois[,2],drois[,6],drois[,7],drois[,9]))
colnames(df) <- c('subject_id','visit_id','from','to','weight')
df
}else{
df <- as.data.frame(cbind(data_full[,1],data_full[,2],data_full[,12],data_full[,13],data_full[,10]))
colnames(df) <- c('subject_id','visit_id','from','to','weight')
df
}
}
Df <- read_and_normalize_fbc(dp,"FBC")
read_and_normalize_fbc <- function(data_path,WM_metric){
data_full <- readxl::read_excel(data_path)
if(WM_metric=='FBC'){
# drois <- separateRois(data_full)
df <- as.data.frame(cbind(data_full[,1],data_full[,2],data_full[,6],data_full[,7],data_full[,9]))
colnames(df) <- c('subject_id','visit_id','from','to','weight')
df
}else{
df <- as.data.frame(cbind(data_full[,1],data_full[,2],data_full[,12],data_full[,13],data_full[,10]))
colnames(df) <- c('subject_id','visit_id','from','to','weight')
df
}
}
Df <- read_and_normalize_fbc(dp,"FBC")
read_and_normalize_fbc <- function(data_path,WM_metric){
data_full <- readxl::read_excel(data_path)
if(WM_metric=='FBC'){
# drois <- separateRois(data_full)
df <- as.data.frame(cbind(data_full[,1],data_full[,2],data_full[,6],data_full[,7],data_full[,9]))
colnames(df) <- c('subject_id','visit_id','from','to','weight')
df
}else{
df <- as.data.frame(cbind(data_full[,1],data_full[,2],data_full[,12],data_full[,13],data_full[,10]))
colnames(df) <- c('subject_id','visit_id','from','to','weight')
df
}
}
Df <- read_and_normalize_fbc(dp,"FBC")
source("~/NetworkConhect/R/1_load_data.R", echo=TRUE)
Df <- read_and_normalize_fbc(dp,"FBC")
Df
head(Df)
source("~/NetworkConhect/R/1_load_data.R", echo=TRUE)
head(Df)
head(Df)
Df <- read_and_normalize_fbc(dp,"FBC")
head(Df)
datafull <- readxl::read_excel(dp)
hist(datafull[,5])
datafull[,5]
datafull["fbc_single"]
hist(datafull["fbc_single"])
hist(datafull["fiber_density"])
datafull["fiber_density"][1]
datafull["fiber_density"][[1]]
hist(datafull["fiber_density"][[1]])
hist(datafull["Distance"][[1]])
hist(datafull["fbc_single"][[1]])
devtools::install()
devtools::install()
.Last.error
devtools::document()
.Last.error
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
source("~/NetworkConhect/R/1_load_data.R", echo=TRUE)
devtools::install()
devtools::install()
source("~/NetworkConhect/R/1_load_data.R", echo=TRUE)
devtools::install()
source("~/NetworkConhect/R/1_load_data.R", echo=TRUE)
source("~/NetworkConhect/R/1_load_data.R", echo=TRUE)
devtools::install()
devtools::install()
devtools::install()
devtools::install()
dev.off()
dev.off()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
source("~/NetworkConhect/R/1_load_data.R", echo=TRUE)
devtools::install()
use_git()
devtools::use_git()
use_git()
source("~/NetworkConhect/R/main_exe_2.R", echo=TRUE)
match(c('fbc','fa','fintra'),'fbc')
match.arg(c('fbc','fa','fintra'),'fbc')
match.arg('fbc')
'fbc' in c('fbc','fa')
if('fbc' in c('fbc','fa'))
source("~/NetworkConhect/R/1_load_data.R", echo=TRUE)
library(NetworkConhect)
library(NetworkConhect)
devtools::install()
library(NetworkConhect)
devtools::install()
if(filename %in% files){
paste(data_path,'/',filename,sep="")
}else{
print("file not found")
}
getDataDir("/home/imabrain/Documents/GraphConhect/data","FBC")
source("~/NetworkConhect/R/1_load_data.R", echo=TRUE)
getDataDir("/home/imabrain/Documents/GraphConhect/data","FBC")
source("~/NetworkConhect/R/1_load_data.R", echo=TRUE)
getDataDir("/home/imabrain/Documents/GraphConhect/data","FBC")
source("~/NetworkConhect/R/1_load_data.R", echo=TRUE)
source("~/NetworkConhect/R/1_load_data.R", echo=TRUE)
devtools::install()
source("~/NetworkConhect/R/1_load_data.R", echo=TRUE)
devtools::install()
source("~/NetworkConhect/R/5_global_linear_model.R", echo=TRUE)
devtools::install()
devtools::install()
devtools::install()
devtools::document()
devtools::install()
source("~/NetworkConhect/R/5_global_linear_model.R", echo=TRUE)
devtools::install()
source("~/NetworkConhect/R/5_global_linear_model.R", echo=TRUE)
devtools::install()
devtools::install()
source("~/NetworkConhect/R/5_global_linear_model.R", echo=TRUE)
devtools::install()
source("~/NetworkConhect/R/5_global_linear_model.R", echo=TRUE)
source("~/NetworkConhect/R/5_global_linear_model.R", echo=TRUE)
devtools::install()
source("~/NetworkConhect/R/6_rich_club_analysis.R", echo=TRUE)
source("~/NetworkConhect/R/6_rich_club_analysis.R", echo=TRUE)
devtools::install()
source("~/NetworkConhect/R/6_rich_club_analysis.R", echo=TRUE)
devtools::install()
source("~/NetworkConhect/R/6_rich_club_analysis.R", echo=TRUE)
devtools::install()
source("~/NetworkConhect/R/6_rich_club_analysis.R", echo=TRUE)
devtools::install()
source("~/.active-rstudio-document", echo=TRUE)
plot(desterieux)
ggseg(atlas = desterieux)
ggseg(atlas = "desterieux")
brain_labels(dk)
brain_labels(desterieux)
remotes::install_github("ggseg/ggsegExtra")
remotes::install_github("LCBC-UiO/ggsegDesterieux")
options(repos = c(
ggseg = 'https://ggseg.r-universe.dev',
CRAN = 'https://cloud.r-project.org'))
install.packages('ggsegDesterieux')
library(ggsegDesterieux)
data("desterieux")
data("desterieux")
datadesterieux)
data(desterieux)
label(desterieux)
desterieux
desterieux$palette
desterieux$label
brain_labels(desterieux)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
subcortical_labels
brain_regions(aseg)
brain_pal(aseg)
brain_atlas(aseg)
someData = data.frame(
region = c("transverse temporal", "insula",
"precentral","superior parietal"),
p = sample(seq(0,.5,.001), 4),
stringsAsFactors = FALSE)
someData
brain_join(someData, dk)
b <- brain_join(someData, dk)
ggseg(b)
plot(b)
b <- brain_join(someData, desterieux)
source("~/.active-rstudio-document", echo=TRUE)
plot(b)
cortical_labels
source("~/.active-rstudio-document", echo=TRUE)
plot(b)
b <- brain_join(someData, desterieux,by = "labels")
b <- brain_join(someData, desterieux,by = labels)
b <- brain_join(someData, desterieux,by = 'labels')
brain_labels(desterieux)
someData = data.frame(
labels = c("rh_S_front_inf", "rh_S_front_sup"),
p = sample(seq(0,.5,.001), 2),
stringsAsFactors = FALSE)
b <- brain_join(someData, desterieux,by = 'labels')
someData
d2 <- as_ggseg_atlas(desterieux)
b <- brain_join(someData, d2,by = 'labels')
someData = data.frame(
label = c("rh_S_front_inf", "rh_S_front_sup"),
p = sample(seq(0,.5,.001), 2),
stringsAsFactors = FALSE)
#d2 <- as_ggseg_atlas(desterieux)
b <- brain_join(someData, d2,by = 'label')
plot(b)
b <- brain_join(someData, desterieux,by = 'label')
b
plot(b)
someData %>%
brain_join(desterieux, by = "label") %>%
ggplot() +
geom_sf(aes(fill = p))
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
plot_cortdesterieux2d()
plot_cortdesterieux3d <- function(){
ggseg3d(atlas = desterieux_3d) %>%
pan_camera("right lateral")
}
plot_cortdesterieux3d()
source("C:/Users/Francois/Desktop/Thèse/NetworkConhect/R/7_visualisation_tools_brain.R", echo=TRUE)
plot_dataonbrain(dataOnBrain)
source("C:/Users/Francois/Desktop/Thèse/NetworkConhect/R/7_visualisation_tools_brain.R", echo=TRUE)
plot_dataonbrain(dataOnBrain)
dataOnBrain
source("C:/Users/Francois/Desktop/Thèse/NetworkConhect/R/7_visualisation_tools_brain.R", echo=TRUE)
dataOnBrain
plot_dataonbrain(dataOnBrain)
source("C:/Users/Francois/Desktop/Thèse/NetworkConhect/R/7_visualisation_tools_brain.R", echo=TRUE)
plot_dataonbrain(dataOnBrain)
source("C:/Users/Francois/Desktop/Thèse/NetworkConhect/R/7_visualisation_tools_brain.R", echo=TRUE)
plot_dataonbrain(dataOnBrain)
source("C:/Users/Francois/Desktop/Thèse/NetworkConhect/R/7_visualisation_tools_brain.R", echo=TRUE)
plot_dataonbrain(dataOnBrain)
source("C:/Users/Francois/Desktop/Thèse/NetworkConhect/R/7_visualisation_tools_brain.R", echo=TRUE)
source("C:/Users/Francois/Desktop/Thèse/NetworkConhect/R/7_visualisation_tools_brain.R", echo=TRUE)
plot_dataonbrain(dataOnBrain)
source("C:/Users/Francois/Desktop/Thèse/NetworkConhect/R/7_visualisation_tools_brain.R", echo=TRUE)
plot_dataonbrain(dataOnBrain)
plot_subcort <- function(){
plot(aseg) +
theme(legend.position = "bottom",
legend.text = element_text(size = 7)) +
guides(fill = guide_legend(ncol = 3))
}
plot_subcort()
source("C:/Users/Francois/Desktop/Thèse/NetworkConhect/R/7_visualisation_tools_brain.R", echo=TRUE)
plot_subcort()
source("C:/Users/Francois/Desktop/Thèse/NetworkConhect/R/7_visualisation_tools_brain.R", echo=TRUE)
plot_subcort()
source("C:/Users/Francois/Desktop/Thèse/NetworkConhect/R/7_visualisation_tools_brain.R", echo=TRUE)
source("C:/Users/Francois/Desktop/Thèse/NetworkConhect/R/7_visualisation_tools_brain.R", echo=TRUE)
plot_subcort()
source("C:/Users/Francois/Desktop/Thèse/NetworkConhect/R/7_visualisation_tools_brain.R", echo=TRUE)
plot_subcort()
ggseg(aseg)
ggseg(atlas=aseg)
library(NetworkConhect)
library(NetworkConhect)
library(NetworkConhect)
devtools::document()
devtools::install()
